# IPTABLES : iptables is an IP filter

- This is a listing of the most common terms used in IP filtering.

**Drop/Deny** - When a packet is dropped or denied, it is simply deleted, and no further actions are taken. No reply to tell the host it was dropped, nor is the receiving host of the packet notified in any way. The packet simply disappears.

**Reject** - This is basically the same as a drop or deny target or policy, except that we also send a reply to the host sending the packet that was dropped.

**State** - A specific state of a packet in comparison to a whole stream of packets. For example, if the packet is the first that the firewall sees or knows about, it is considered new (the SYN packet in a TCP connection), or if it is part of an already established connection that the firewall knows about, it is considered to be established. States are known through the connection tracking system, which keeps track of all the sessions.

**Chain** - A chain contains a ruleset of rules that are applied on packets that traverses the chain. Each chain has a specific purpose (e.g., which table it is connected to, which specifies what this chain is able to do), as well as a specific application area (e.g., only forwarded packets, or only packets destined for this host). In iptables, there are several different chains.

**Table** - Each table has a specific purpose, and in iptables there are 4 tables. The raw, nat, mangle and filter tables. For example, the filter table is specifically designed to filter packets, while the nat table is specifically designed to NAT (Network Address Translation) packets.

**Match** - This word can have two different meanings when it comes to IP filtering. The first meaning would be a single match that tells a rule that this header must contain this and this information. For example, the --source match tells us that the source address must be a specific network range or host address. The second meaning is if a whole rule is a match. If the packet matches the whole rule, the jump or target instructions will be carried out (e.g., the packet will be dropped.)

**Target** - There is generally a target set for each rule in a ruleset. If the rule has matched fully, the target specification tells us what to do with the packet. For example, if we should drop or accept it, or NAT it, etc. There is also something called a jump specification, for more information see the jump description in this list. As a last note, there might not be a target or jump for each rule, but there may be.

**Rule** - A rule is a set of a match or several matches together with a single target in most implementations of IP filters, including the iptables implementation. There are some implementations which let you use several targets/actions per rule.

**Ruleset** - A ruleset is the complete set of rules that are put into a whole IP filter implementation. In the case of iptables, this includes all of the rules set in the filter, nat, raw and mangle tables, and in all of the subsequent chains. Most of the time, they are written down in a configuration file of some sort.

**Jump** - The jump instruction is closely related to a target. A jump instruction is written exactly the same as a target in iptables, with the exception that instead of writing a target name, you write the name of another chain. If the rule matches, the packet will hence be sent to this second chain and be processed as usual in that chain.

**Connection tracking** - A firewall which implements connection tracking is able to track connections/streams simply put. The ability to do so is often done at the impact of lots of processor and memory usage.

**Accept** - To accept a packet and to let it through the firewall rules. This is the opposite of the drop or deny targets, as well as the reject target.

**Policy** - There are two kinds of policies that we speak about most of the time when implementing a firewall. First we have the chain policies, which tells the firewall implementation the default behaviour to take on a packet if there was no rule that matched it. This is the main usage of the word that we will use in this book. The second type of policy is the security policy that we may have written documentation on, for example for the whole company or for this specific network segment. Security policies are very good documents to have thought through properly and to study properly before starting to actually implement the firewall.

- ----------------------------------------------------------------------------------------------------------------------------------------------
- ----------------------------------------------------------------------------------------------------------------------------------------------

## iptables-save

The iptables-save command is used to save the current rule-set into a file that iptables-restore can use. It takes only two arguments. Syntax of the command.

- iptables-save [-c] [-t table]

- The -c argument tells iptables-save to keep the values specified in the byte and packet counters. This could for example be useful if we would like to reboot our main firewall, but not lose byte and packet counters which we may use for statistical purposes.

- The -t argument tells the iptables-save command which tables to save. Without this argument the command will automatically save all tables available into the file.

## iptables-restore

The iptables-restore command is used to restore the iptables rule-set that was saved with the iptables-save command. Syntax of the command.

- iptables-restore [-c] [-n]
  
- The -c argument restores the byte and packet counters and must be used if you want to restore counters that were previously saved with iptables-save. This argument may also be written in its long form --counters.

- The -n argument tells iptables-restore to not overwrite the previously written rules in the table, or tables, that it is writing to. The default behavior of iptables-restore is to flush and destroy all previously inserted rules. The short -n argument may also be replaced with the longer format --noflush.

## Basics of iptables command

- **Base Syntax**

- iptables [-t table] [commands] [chain_rule] [match] [target/jump] [options]

- **Tables**

- There are five possible tables:

- FILTER: Default used table for packet filtering. It includes chains like INPUT, OUTPUT and FORWARD.
- NAT : Related to Network Address Translation. It includes PREROUTING and POSTROUTING chains.
- MANGLE : For specialised packet alteration. Inbuilt chains include PREROUTING and OUTPUT.
- RAW : Configures exemptions from connection tracking. Built-in chains are PREROUTING and OUTPUT.
- SECURITY : Used for Mandatory Access Control

- **Commands**

- -A, --append
- -D, --delete
- -R, --replace
- -I, --insert
- -L, --list
- -F, --flush
- -Z, --zero
- -N, --new-chain
- -X, --delete-chain
- -P, --policy
- -E, --rename-chain

- **Chain Rule**

- Here are the default table/chain combinations:

- FILTER: Input, Output, Forward
- NAT: Prerouting, Postrouting, Output
- MANGLE: Prerouting, Postrouting, Input, Output, Forward

And here’s when the different chains do their thing:

- PREROUTING: Immediately after being received by an interface.
- POSTROUTING: Right before leaving an interface.
- INPUT: Right before being handed to a local process.
- OUTPUT: Right after being created by a local process.
- FORWARD: For any packets coming in one interface and leaving out another.

- **Match**

- There are multiple types of Matches. Here, only four mostly used matches are mentioned.

- Generic Match :
  
- -p, --protocol
- -s, --src, --source
- -d, --dst, --destination
- -i, --in-interface
- -o, --out-interface
- -f, --fragment
- -j, –-jump
  
- Implicit Match :
- TCP Match :
  
- --sport, --source-port
- --dport, --destination-port
- --tcp-flags
- --syn
- --tcp-option

- UDP Match :

- --sport, --source-port
- --dport, --destination-port

- ICMP Match :

- --icmp-type

- **TARGET**

- There are multiple targets. Here, few of the most used TARGETS are mentioned.

- ACCEPT TARGET
- DROP TARGET
- DNAT TARGET **option** : --to-destination
- SNAT TARGET **option** : --to-source
- DSCP TARGET **option** : --set-dscp
- ECN TARGET
- MARK TARGET **option** : --set-mark
- MASQUERADE TARGET **option** : --to-ports
- MIRROR TARGET
- NETMAP TARGET **option** : --to
- NOTRACK TARGET
- REJECT TARGET **option** : --reject-with
- REDIRECT TARGET
- RETURN TARGET
- SAME TARGET **option** : --to
- TCPMSS TARGET **option** : --set-mss
- TOS TARGET **option** : --set-tos
- TTL TARGET **option** : --ttl-set, --ttl-dec, --ttl-inc

- For read in more details read :
- [https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#TRAVERSINGGENERAL]

## SNAT vs DNAT vs MASQUERADE

- SNAT & MASQUERADE changes the source address of a packet.
- DNAT changes the destination address of a packet = port forwarding.
- The SNAT target requires you to give it an IP address to apply to all the outgoing packets. The MASQUERADE target lets you give it an interface, and whatever address is on that interface is the address that is applied to all the outgoing packets. In addition, with SNAT, the kernel's connection tracking keeps track of all the connections when the interface is taken down and brought back up; the same is not true for the MASQUERADE target.

## Some important iptables command

1. NAT Rules

- iptables -t nat -A POSTROUTING -s 10.1.1.101 -d 10.10.1.102 -j SNAT --to-source 5.5.5.1
- nat <-- table
- -A <-- command
- PREROUTING <-- chain rule
- -s 10.1.1.101 -d 10.10.1.102 -j <-- match
- SNAT <-- target
- --to-source 5.5.5.1 <-- options

- iptables -t nat -A PREROUTING -s 10.1.1.101 -d 10.10.1.102 -j DNAT --to-destination 5.5.5.1

- changing port address
- iptables -t nat -A POSTROUTING -s 11.1.1.140/32 -d 11.10.1.140/32 -p udp -m udp --sport 4520 -j SNAT --to-source 11.1.1.140:1024
